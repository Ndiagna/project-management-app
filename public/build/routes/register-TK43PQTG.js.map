{
  "version": 3,
  "sources": ["../../../app/routes/register.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\register.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\register.tsx\");\n  import.meta.hot.lastModified = \"1717235318444.2869\";\n}\n// REMIX HMR END\n\nimport React, { Form } from '@remix-run/react';\nimport { useState } from 'react';\nimport { redirect } from '@remix-run/node';\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const email = formData.get('email');\n  const password = formData.get('password');\n  const confirmPassword = formData.get('confirmPassword');\n  if (password !== confirmPassword) {\n    return {\n      formError: 'Passwords do not match'\n    };\n  }\n\n  // Impl\u00E9mentez l'enregistrement ici\n  // Exemple :\n  // const response = await fetch('/api/auth/register', {\n  //   method: 'POST',\n  //   body: JSON.stringify({ email, password }),\n  //   headers: { 'Content-Type': 'application/json' }\n  // });\n  // if (response.ok) {\n  //   return redirect('/login');\n  // }\n\n  return redirect('/login'); // Temporaire, ajustez selon votre logique d'enregistrement\n};\nconst Register = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  return <div>\r\n      <h2>Register</h2>\r\n      <Form method=\"post\">\r\n        <input type=\"email\" name=\"email\" value={email} onChange={e => setEmail(e.target.value)} placeholder=\"Email\" />\r\n        <input type=\"password\" name=\"password\" value={password} onChange={e => setPassword(e.target.value)} placeholder=\"Password\" />\r\n        <input type=\"password\" name=\"confirmPassword\" value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} placeholder=\"Confirm Password\" />\r\n        <button type=\"submit\">Register</button>\r\n      </Form>\r\n    </div>;\n};\n_s(Register, \"aQoIR8WEyeY0VOX5aa1/CZeLkXM=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAAA,gBAAyB;AACzB,kBAAyB;AAiCnB;AAvDN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,oCAAsC,EAAE;AAAA,EACjF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA2B;AAC3B,cAAY,IAAI,eAAe;AACjC;AAgCA,IAAM,WAAW,MAAM;AACrB,KAAG;AACH,QAAM,CAAC,OAAO,QAAQ,QAAI,wBAAS,EAAE;AACrC,QAAM,CAAC,UAAU,WAAW,QAAI,wBAAS,EAAE;AAC3C,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,wBAAS,EAAE;AACzD,SAAO,mDAAC,SACJ;AAAA,uDAAC,QAAG,wBAAJ;AAAA;AAAA;AAAA;AAAA,WAAY;AAAA,IACZ,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,WAAM,MAAK,SAAQ,MAAK,SAAQ,OAAO,OAAO,UAAU,OAAK,SAAS,EAAE,OAAO,KAAK,GAAG,aAAY,WAApG;AAAA;AAAA;AAAA;AAAA,aAA4G;AAAA,MAC5G,mDAAC,WAAM,MAAK,YAAW,MAAK,YAAW,OAAO,UAAU,UAAU,OAAK,YAAY,EAAE,OAAO,KAAK,GAAG,aAAY,cAAhH;AAAA;AAAA;AAAA;AAAA,aAA2H;AAAA,MAC3H,mDAAC,WAAM,MAAK,YAAW,MAAK,mBAAkB,OAAO,iBAAiB,UAAU,OAAK,mBAAmB,EAAE,OAAO,KAAK,GAAG,aAAY,sBAArI;AAAA;AAAA;AAAA;AAAA,aAAwJ;AAAA,MACxJ,mDAAC,YAAO,MAAK,UAAS,wBAAtB;AAAA;AAAA;AAAA;AAAA,aAA8B;AAAA,SAJhC;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,OAPG;AAAA;AAAA;AAAA;AAAA,SAQL;AACJ;AACA,GAAG,UAAU,8BAA8B;AAC3C,KAAK;AACL,IAAO,mBAAQ;AACf,IAAI;AACJ,aAAa,IAAI,UAAU;AAE3B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react"]
}
