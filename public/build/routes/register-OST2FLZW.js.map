{
  "version": 3,
  "sources": ["../../../app/routes/register.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\register.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\register.tsx\");\n}\n// REMIX HMR END\n\nimport React, { Form } from '@remix-run/react';\nimport { useState } from 'react';\nimport { redirect } from '@remix-run/node';\nimport stylesUrl from 'app/styles/register.css';\nexport const links = () => {\n  return [{\n    rel: \"stylesheet\",\n    href: stylesUrl\n  }];\n};\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const email = formData.get('email');\n  const password = formData.get('password');\n  const confirmPassword = formData.get('confirmPassword');\n  if (password !== confirmPassword) {\n    return {\n      formError: 'Passwords do not match'\n    };\n  }\n\n  // Validation c\u00F4t\u00E9 serveur\n  const response = await fetch('http://localhost:5000/api/auth/register', {\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  if (response.ok) {\n    return redirect('/login');\n  } else {\n    // G\u00E9rer les erreurs\n    const errorData = await response.json();\n    return {\n      formError: errorData.message\n    }; // Si le serveur renvoie un message d'erreur\n  }\n};\nconst Register = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [formError, setFormError] = useState(null);\n  return <div className=\"container\">\r\n      <h2 className=\"title\">Register</h2>\r\n      {formError && <div className=\"error\">{formError}</div>}\r\n      <Form method=\"post\" className=\"loginForm\">\r\n        <input type=\"email\" name=\"email\" value={email} onChange={e => setEmail(e.target.value)} placeholder=\"Email\" className=\"input\" />\n        \r\n        <input type=\"password\" name=\"password\" value={password} onChange={e => setPassword(e.target.value)} placeholder=\"Password\" className=\"input\" />\n        \r\n        <input type=\"password\" name=\"confirmPassword\" value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} placeholder=\"Confirm Password\" className=\"input\" />\n        \r\n        <button type=\"submit\" className=\"button\">Register</button>\r\n      </Form>\r\n    </div>;\n};\n_s(Register, \"hOdEV7CzA82FVqOsVTslEpZmkK8=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAAA,gBAAyB;AACzB,kBAAyB;;;;;;AAiDnB;AAtEN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,oCAAsC,EAAE;AAAA,EACjF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA2B;AAC7B;AAOO,IAAM,QAAQ,MAAM;AACzB,SAAO,CAAC;AAAA,IACN,KAAK;AAAA,IACL,MAAM;AAAA,EACR,CAAC;AACH;AAmCA,IAAM,WAAW,MAAM;AACrB,KAAG;AACH,QAAM,CAAC,OAAO,QAAQ,QAAI,wBAAS,EAAE;AACrC,QAAM,CAAC,UAAU,WAAW,QAAI,wBAAS,EAAE;AAC3C,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,wBAAS,EAAE;AACzD,QAAM,CAAC,WAAW,YAAY,QAAI,wBAAS,IAAI;AAC/C,SAAO,mDAAC,SAAI,WAAU,aAClB;AAAA,uDAAC,QAAG,WAAU,SAAQ,wBAAtB;AAAA;AAAA;AAAA;AAAA,WAA8B;AAAA,IAC7B,aAAa,mDAAC,SAAI,WAAU,SAAS,uBAAxB;AAAA;AAAA;AAAA;AAAA,WAAkC;AAAA,IAChD,mDAAC,QAAK,QAAO,QAAO,WAAU,aAC5B;AAAA,yDAAC,WAAM,MAAK,SAAQ,MAAK,SAAQ,OAAO,OAAO,UAAU,OAAK,SAAS,EAAE,OAAO,KAAK,GAAG,aAAY,SAAQ,WAAU,WAAtH;AAAA;AAAA;AAAA;AAAA,aAA8H;AAAA,MAE9H,mDAAC,WAAM,MAAK,YAAW,MAAK,YAAW,OAAO,UAAU,UAAU,OAAK,YAAY,EAAE,OAAO,KAAK,GAAG,aAAY,YAAW,WAAU,WAArI;AAAA;AAAA;AAAA;AAAA,aAA6I;AAAA,MAE7I,mDAAC,WAAM,MAAK,YAAW,MAAK,mBAAkB,OAAO,iBAAiB,UAAU,OAAK,mBAAmB,EAAE,OAAO,KAAK,GAAG,aAAY,oBAAmB,WAAU,WAAlK;AAAA;AAAA;AAAA;AAAA,aAA0K;AAAA,MAE1K,mDAAC,YAAO,MAAK,UAAS,WAAU,UAAS,wBAAzC;AAAA;AAAA;AAAA;AAAA,aAAiD;AAAA,SAPnD;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,OAXG;AAAA;AAAA;AAAA;AAAA,SAYL;AACJ;AACA,GAAG,UAAU,8BAA8B;AAC3C,KAAK;AACL,IAAOC,oBAAQ;AACf,IAAI;AACJ,aAAa,IAAI,UAAU;AAE3B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react", "register_default"]
}
