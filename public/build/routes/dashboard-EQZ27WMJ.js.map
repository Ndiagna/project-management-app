{
  "version": 3,
  "sources": ["../../../app/routes/dashboard.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/dashboard.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/dashboard.tsx\");\n  import.meta.hot.lastModified = \"1717235465040.8396\";\n}\n// REMIX HMR END\n\nimport React, { useLoaderData } from '@remix-run/react';\nexport const loader = async () => {\n  // Remplacez par votre logique de chargement des donn\u00E9es\n  // Exemple :\n  // const response = await fetch('/api/dashboard');\n  // const data = await response.json();\n  // return data;\n\n  return {\n    projects: [],\n    tasks: []\n  }; // Temporaire, remplacez par vos donn\u00E9es r\u00E9elles\n};\nconst Dashboard = () => {\n  _s();\n  const data = useLoaderData();\n  return <div>\r\n      <h2>Dashboard</h2>\r\n      <div>\r\n        <h3>Projects</h3>\r\n        <ul>\r\n          {data.projects.map(project => <li key={project.id}>{project.name}</li>)}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <h3>Tasks</h3>\r\n        <ul>\r\n          {data.tasks.map(task => <li key={task.id}>{task.name}</li>)}\r\n        </ul>\r\n      </div>\r\n    </div>;\n};\n_s(Dashboard, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;AAsCM;AArCN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,+BAAiC,EAAE;AAAA,EAC5E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA0B;AAC1B,cAAY,IAAI,eAAe;AACjC;AAgBA,IAAM,YAAY,MAAM;AACtB,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,SAAO,mDAAC,SACJ;AAAA,uDAAC,QAAG,yBAAJ;AAAA;AAAA;AAAA;AAAA,WAAa;AAAA,IACb,mDAAC,SACC;AAAA,yDAAC,QAAG,wBAAJ;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,MACZ,mDAAC,QACE,eAAK,SAAS,IAAI,aAAW,mDAAC,QAAqB,kBAAQ,QAArB,QAAQ,IAAjB;AAAA;AAAA;AAAA;AAAA,aAAmC,CAAK,KADxE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJF;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,mDAAC,SACC;AAAA,yDAAC,QAAG,qBAAJ;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,MACT,mDAAC,QACE,eAAK,MAAM,IAAI,UAAQ,mDAAC,QAAkB,eAAK,QAAf,KAAK,IAAd;AAAA;AAAA;AAAA;AAAA,aAA6B,CAAK,KAD5D;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJF;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,OAbG;AAAA;AAAA;AAAA;AAAA,SAcL;AACJ;AACA,GAAG,WAAW,gCAAgC,OAAO,WAAY;AAC/D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAO,oBAAQ;AACf,IAAI;AACJ,aAAa,IAAI,WAAW;AAE5B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
